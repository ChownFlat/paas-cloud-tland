<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <artifactId>paas-cloud-web</artifactId>
        <groupId>com.quanteng</groupId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>paas-cloud-charging-web</artifactId>
    <packaging>war</packaging>

    <name>paas-cloud-charging-web</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <docker.image.name>paas-charging-web-image</docker.image.name>
    </properties>

    <dependencies>
        <dependency>
            <groupId>com.quanteng</groupId>
            <artifactId>paas-cloud-charging-provider</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <artifactId>logback-classic</artifactId>
                    <groupId>ch.qos.logback</groupId>
                </exclusion>
                <exclusion>
                    <artifactId>log4j-to-slf4j</artifactId>
                    <groupId>org.apache.logging.log4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>paas-charging-web</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <!--自定义打包插件-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>${plugin.assembly.version}</version>
                <executions>
                    <execution>
                        <!-- 环境 -->
                        <id>developer</id>
                        <!-- 添加到maven的生命周期 -->
                        <phase>package</phase>
                        <goals>
                            <!-- 只运行一次 -->
                            <goal>single</goal>
                        </goals>
                        <configuration>
                            <encoding>UTF-8</encoding>
                            <appendAssemblyId>true</appendAssemblyId>
                            <finalName>${project.build.finalName}</finalName>
                            <!--<outputFileNameMapping>@{artifactId}@-@{baseVersion}@.@{extension}@</outputFileNameMapping>-->
                            <!--<outputDirectory>${ideploy.dir}</outputDirectory>-->
                            <!-- 描述文件路径 -->
                            <descriptors>
                                <descriptor>src/main/assembly/assembly.xml</descriptor>
                            </descriptors>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!--Docker打包插件-->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <!--项目工程artifactId-->
                    <imageName>${project.artifactId}</imageName>
                    <!--Dockerfile文件位置-->
                    <dockerDirectory>${project.basedir}/docker</dockerDirectory>
                    <!--打成Docker镜像，添加资源到docker镜像里面-->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${docker.image.name}.zip</include>
                        </resource>
                    </resources>
                </configuration>
                <executions>
                    <!--构建镜像，将build绑定到mvn package的生命周期上-->
                    <execution>
                        <id>build-image</id>
                        <phase>install</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                    <!--将镜像添加标签，将tag绑定到mvn package的生命周期上-->
                    <execution>
                        <id>tag-image</id>
                        <phase>install</phase>
                        <goals>
                            <goal>tag</goal>
                        </goals>
                        <configuration>
                            <image>${project.artifactId}</image>
                            <newName>${docker.repo}/${project.artifactId}:${project.version}</newName>
                            <forceTags>true</forceTags>
                        </configuration>
                    </execution>
                    <!--推送镜像到远程仓库，将push绑定到mvn install的生命周期上-->
                    <execution>
                        <id>push-image</id>
                        <phase>deploy</phase>
                        <goals>
                            <goal>push</goal>
                        </goals>
                        <configuration>
                            <imageName>${docker.repo}/${project.artifactId}:${project.version}</imageName>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>
